version: 2.1

orbs:
  python: circleci/python@0.2.1
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-cli: circleci/aws-cli@1.0.0
  aws-ecs: circleci/aws-ecs@0.0.10
  slack: circleci/slack@3.4.2

jobs:
  test:
    executor: python/default
    steps:
      - checkout
      - python/install-deps
      - run:
          command: bash test.sh
          name: Test
  notify-pre-deploy:
    executor: slack/alpine
    steps:
      - run:
          command: |
            curl -X POST -H 'Content-type: application/json' \
              --data \
              "{ \
                \"embeds\": [ \
                  { \
                    \"description\": \"Miami is being deployed, please standby.\" \
                  } \
                ] \
              }" $DISCORD_WEBHOOK
  notify-post-deploy:
    executor: aws-cli/default
    steps:
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: Get last task definition
          command: >
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition miami \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >>
            $BASH_ENV
      - aws-ecs/verify-revision-is-deployed:
          family: miami
          cluster-name: miami
          task-definition-arn: '${TASK_DEFINITION_ARN}'
      - run:
          command: |
            curl -X POST -H 'Content-type: application/json' \
              --data \
              "{ \
                \"embeds\": [ \
                  { \
                    \"description\": \"Miami has been deployed, get on and have fun!\" \
                  } \
                ] \
              }" $DISCORD_WEBHOOK


workflows:
  main:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          requires:
            - test
          account-url: AWS_ECR_ACCOUNT_URL
          repo: miami
          region: AWS_REGION
          tag: '${CIRCLE_SHA1}'
      - notify-pre-deploy:
          requires:
            - aws-ecr/build-and-push-image
      - aws-ecs/deploy-service-update:
          requires:
            - notify-pre-deploy
          family: miami
          cluster-name: miami
          container-image-name-updates: 'container=miami,tag=${CIRCLE_SHA1}'
      - notify-post-deploy:
          requires:
            - aws-ecs/deploy-service-update
